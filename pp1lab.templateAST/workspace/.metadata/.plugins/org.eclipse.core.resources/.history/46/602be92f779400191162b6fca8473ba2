// generated with ast extension for cup
// version 0.8
// 20/5/2019 22:57:46


package rs.ac.bg.etf.pp1.ast;

public abstract class VisitorAdaptor implements Visitor { 

    public void visit(Powfact Powfact) { }
    public void visit(Mulop Mulop) { }
    public void visit(InterfaceMethodDeclList InterfaceMethodDeclList) { }
    public void visit(Relop Relop) { }
    public void visit(TermList TermList) { }
    public void visit(Implementation Implementation) { }
    public void visit(FormParsArg FormParsArg) { }
    public void visit(ProgDeclList ProgDeclList) { }
    public void visit(OptionalBrackets OptionalBrackets) { }
    public void visit(StatementList StatementList) { }
    public void visit(Addop Addop) { }
    public void visit(Factor Factor) { }
    public void visit(ArrayParts ArrayParts) { }
    public void visit(CondTerm CondTerm) { }
    public void visit(Designator Designator) { }
    public void visit(InterfaceMethodDecl InterfaceMethodDecl) { }
    public void visit(Term Term) { }
    public void visit(Condition Condition) { }
    public void visit(BasicIf BasicIf) { }
    public void visit(EnumExprList EnumExprList) { }
    public void visit(ActualParamList ActualParamList) { }
    public void visit(VarDeclList VarDeclList) { }
    public void visit(FormalParamList FormalParamList) { }
    public void visit(Expr Expr) { }
    public void visit(ConstExprList ConstExprList) { }
    public void visit(ActPars ActPars) { }
    public void visit(ClassImplementsList ClassImplementsList) { }
    public void visit(MethodTypeName MethodTypeName) { }
    public void visit(DesignatorStatement DesignatorStatement) { }
    public void visit(ActualPars ActualPars) { }
    public void visit(OptionalCondition OptionalCondition) { }
    public void visit(Extension Extension) { }
    public void visit(OptionalDesignatorStatement OptionalDesignatorStatement) { }
    public void visit(Statement Statement) { }
    public void visit(VarDecl VarDecl) { }
    public void visit(VarExprList VarExprList) { }
    public void visit(ClassDecl ClassDecl) { }
    public void visit(CondFact CondFact) { }
    public void visit(MethodDeclList MethodDeclList) { }
    public void visit(EnumExpr EnumExpr) { }
    public void visit(FormPars FormPars) { }
    public void visit(ConstType ConstType) { }
    public void visit(ActualParam ActualParam) { visit(); }
    public void visit(ActualParams ActualParams) { visit(); }
    public void visit(NoActuals NoActuals) { visit(); }
    public void visit(Actuals Actuals) { visit(); }
    public void visit(FormalParamDecl FormalParamDecl) { visit(); }
    public void visit(SingleFormalParamDecl SingleFormalParamDecl) { visit(); }
    public void visit(FormalParamDecls FormalParamDecls) { visit(); }
    public void visit(Type Type) { visit(); }
    public void visit(NoVarDecl NoVarDecl) { visit(); }
    public void visit(VarDeclarations VarDeclarations) { visit(); }
    public void visit(PercentOp PercentOp) { visit(); }
    public void visit(DivideOp DivideOp) { visit(); }
    public void visit(MultipleOp MultipleOp) { visit(); }
    public void visit(AddopMinus AddopMinus) { visit(); }
    public void visit(AddopPlus AddopPlus) { visit(); }
    public void visit(RelationalLessEqual RelationalLessEqual) { visit(); }
    public void visit(RelationalLess RelationalLess) { visit(); }
    public void visit(RelationalGreaterEqual RelationalGreaterEqual) { visit(); }
    public void visit(RelationalGreater RelationalGreater) { visit(); }
    public void visit(RelationalNotEqual RelationalNotEqual) { visit(); }
    public void visit(RelationalEqual RelationalEqual) { visit(); }
    public void visit(Assignop Assignop) { visit(); }
    public void visit(ArrayDes ArrayDes) { visit(); }
    public void visit(DesignatorIdent DesignatorIdent) { visit(); }
    public void visit(DesignatorListExpr DesignatorListExpr) { visit(); }
    public void visit(DesignatorListIdent DesignatorListIdent) { visit(); }
    public void visit(NewTypeArr NewTypeArr) { visit(); }
    public void visit(ArrPart ArrPart) { visit(); }
    public void visit(Emptiness Emptiness) { visit(); }
    public void visit(ArraySinglePart ArraySinglePart) { visit(); }
    public void visit(ArrayMultipleParts ArrayMultipleParts) { visit(); }
    public void visit(FactExpr FactExpr) { visit(); }
    public void visit(FactNewArrayInit FactNewArrayInit) { visit(); }
    public void visit(FactNewExpr FactNewExpr) { visit(); }
    public void visit(FactNew FactNew) { visit(); }
    public void visit(FactBool FactBool) { visit(); }
    public void visit(FactChar FactChar) { visit(); }
    public void visit(FactNumber FactNumber) { visit(); }
    public void visit(FactDesignatorParsEmpty FactDesignatorParsEmpty) { visit(); }
    public void visit(FactDesignatorPars FactDesignatorPars) { visit(); }
    public void visit(FactDesignator FactDesignator) { visit(); }
    public void visit(PowerFact PowerFact) { visit(); }
    public void visit(Power Power) { visit(); }
    public void visit(TermSingle TermSingle) { visit(); }
    public void visit(TermMultiplied TermMultiplied) { visit(); }
    public void visit(TermListSingle TermListSingle) { visit(); }
    public void visit(TermListAddop TermListAddop) { visit(); }
    public void visit(ExpressionPositive ExpressionPositive) { visit(); }
    public void visit(ExpressionNegative ExpressionNegative) { visit(); }
    public void visit(ConditionFactExpressions ConditionFactExpressions) { visit(); }
    public void visit(ConditionFactExpression ConditionFactExpression) { visit(); }
    public void visit(Andy Andy) { visit(); }
    public void visit(ConditionTermSingle ConditionTermSingle) { visit(); }
    public void visit(ConditionTerms ConditionTerms) { visit(); }
    public void visit(Oreo Oreo) { visit(); }
    public void visit(ConditionSingle ConditionSingle) { visit(); }
    public void visit(Conditions Conditions) { visit(); }
    public void visit(ActPar ActPar) { visit(); }
    public void visit(ActParameterSingle ActParameterSingle) { visit(); }
    public void visit(ActParameters ActParameters) { visit(); }
    public void visit(DesignatorStatementDecrement DesignatorStatementDecrement) { visit(); }
    public void visit(DesignatorStatementIncrement DesignatorStatementIncrement) { visit(); }
    public void visit(DesignatorStatementEmpty DesignatorStatementEmpty) { visit(); }
    public void visit(DesignatorStatementActParameters DesignatorStatementActParameters) { visit(); }
    public void visit(DesignatorStatementAssignError DesignatorStatementAssignError) { visit(); }
    public void visit(DesignatorStatementAssign DesignatorStatementAssign) { visit(); }
    public void visit(NotExistingCondition NotExistingCondition) { visit(); }
    public void visit(ExistingCondition ExistingCondition) { visit(); }
    public void visit(NotExistingDesignatorStatement NotExistingDesignatorStatement) { visit(); }
    public void visit(ExistingDesignatorStatement ExistingDesignatorStatement) { visit(); }
    public void visit(StatementEmpty StatementEmpty) { visit(); }
    public void visit(Statements Statements) { visit(); }
    public void visit(IfCond IfCond) { visit(); }
    public void visit(BasicIfError BasicIfError) { visit(); }
    public void visit(BasicIffy BasicIffy) { visit(); }
    public void visit(Else Else) { visit(); }
    public void visit(RePare RePare) { visit(); }
    public void visit(Sammy Sammy) { visit(); }
    public void visit(StatementListStatement StatementListStatement) { visit(); }
    public void visit(StatementPrintExpr StatementPrintExpr) { visit(); }
    public void visit(StatementPrintExprNum StatementPrintExprNum) { visit(); }
    public void visit(StatementRead StatementRead) { visit(); }
    public void visit(StatementReturnExpr StatementReturnExpr) { visit(); }
    public void visit(StatementReturn StatementReturn) { visit(); }
    public void visit(StatementContinue StatementContinue) { visit(); }
    public void visit(StatementBreak StatementBreak) { visit(); }
    public void visit(StatementFor StatementFor) { visit(); }
    public void visit(StatementIfElse StatementIfElse) { visit(); }
    public void visit(StatemtntIf StatemtntIf) { visit(); }
    public void visit(StatementDesignator StatementDesignator) { visit(); }
    public void visit(NoExistingBrackets NoExistingBrackets) { visit(); }
    public void visit(ExistingBrackets ExistingBrackets) { visit(); }
    public void visit(TypeBrackets TypeBrackets) { visit(); }
    public void visit(FormParsSingle FormParsSingle) { visit(); }
    public void visit(FormParsListError FormParsListError) { visit(); }
    public void visit(FormParsList FormParsList) { visit(); }
    public void visit(ParametersError ParametersError) { visit(); }
    public void visit(Parameters Parameters) { visit(); }
    public void visit(NoParameters NoParameters) { visit(); }
    public void visit(MethodDecl MethodDecl) { visit(); }
    public void visit(MethodVoid MethodVoid) { visit(); }
    public void visit(MethodType MethodType) { visit(); }
    public void visit(InterfaceMethodVoid InterfaceMethodVoid) { visit(); }
    public void visit(InterfaceMethodType InterfaceMethodType) { visit(); }
    public void visit(NoInterfaceMethods NoInterfaceMethods) { visit(); }
    public void visit(InterfaceMethodList InterfaceMethodList) { visit(); }
    public void visit(InterfaceDecl InterfaceDecl) { visit(); }
    public void visit(NoClassImplementList NoClassImplementList) { visit(); }
    public void visit(ClassImplementList ClassImplementList) { visit(); }
    public void visit(NoImplement NoImplement) { visit(); }
    public void visit(Implement Implement) { visit(); }
    public void visit(NoExtendsClass NoExtendsClass) { visit(); }
    public void visit(ExtendsClass ExtendsClass) { visit(); }
    public void visit(ClassDeclarationMethods ClassDeclarationMethods) { visit(); }
    public void visit(ClassDeclaration ClassDeclaration) { visit(); }
    public void visit(VarExpr VarExpr) { visit(); }
    public void visit(VarExpressionSingle VarExpressionSingle) { visit(); }
    public void visit(VarExpressionsError VarExpressionsError) { visit(); }
    public void visit(VarExpressions VarExpressions) { visit(); }
    public void visit(VarDeclError VarDeclError) { visit(); }
    public void visit(VarDeclaration VarDeclaration) { visit(); }
    public void visit(EnumExpressionIdentNumConst EnumExpressionIdentNumConst) { visit(); }
    public void visit(EnumExpressionIdent EnumExpressionIdent) { visit(); }
    public void visit(EnumExpressionSingle EnumExpressionSingle) { visit(); }
    public void visit(EnumExpressions EnumExpressions) { visit(); }
    public void visit(EnumName EnumName) { visit(); }
    public void visit(EnumDecl EnumDecl) { visit(); }
    public void visit(ConstantBoolean ConstantBoolean) { visit(); }
    public void visit(ConstantCharacter ConstantCharacter) { visit(); }
    public void visit(ConstantNumber ConstantNumber) { visit(); }
    public void visit(ConstExpressionSingle ConstExpressionSingle) { visit(); }
    public void visit(ConstExpressions ConstExpressions) { visit(); }
    public void visit(ConstDecl ConstDecl) { visit(); }
    public void visit(NoMethodDecl NoMethodDecl) { visit(); }
    public void visit(MethodDeclarations MethodDeclarations) { visit(); }
    public void visit(ProgramEmpty ProgramEmpty) { visit(); }
    public void visit(ProgramInterfaces ProgramInterfaces) { visit(); }
    public void visit(ProgramEnums ProgramEnums) { visit(); }
    public void visit(ProgramDeclarations ProgramDeclarations) { visit(); }
    public void visit(ProgramVariables ProgramVariables) { visit(); }
    public void visit(ProgramConstants ProgramConstants) { visit(); }
    public void visit(ProgName ProgName) { visit(); }
    public void visit(Program Program) { visit(); }


    public void visit() { }
}
